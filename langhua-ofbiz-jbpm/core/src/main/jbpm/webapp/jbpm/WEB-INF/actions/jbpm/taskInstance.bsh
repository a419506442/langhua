/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
 
import java.util.*;

import org.ofbiz.entity.*;
import org.ofbiz.entity.condition.*;
import org.ofbiz.entity.util.EntityUtil;
import org.ofbiz.base.util.*;
import org.ofbiz.securityext.login.*;
import org.ofbiz.common.*;
import org.ofbiz.party.contact.*;
import org.ofbiz.party.party.*;
import org.ofbiz.accounting.payment.*;
import org.ofbiz.securityext.login.*;

import org.jbpm.JbpmConfiguration;
import org.jbpm.JbpmContext;
import org.jbpm.graph.def.DelegationException;
import org.jbpm.graph.def.Transition;
import org.jbpm.taskmgmt.exe.TaskInstance;

import org.langhua.ofbiz.jbpm.workflow.util.*;
import org.langhua.ofbiz.jbpm.*;


taskInstanceId = parameters.get("taskInstanceId");
processDefinitionId = parameters.get("processDefinitionId");
tokenInstanceId = parameters.get("tokenInstanceId");
processId = parameters.get("processId");
long id = Long.parseLong(taskInstanceId);

context.put("processId", processId);
context.put("tokenInstanceId", tokenInstanceId);
context.put("processDefinitionId", processDefinitionId);
context.put("taskInstanceId", taskInstanceId);

GenericValue userLogin = (GenericValue) request.getSession().getAttribute("userLogin");
String userName = userLogin.getString("userLoginId");
String taskInstanceFormName ="";
JbpmContext jbpmContext = JbpmConfiguration.getInstance()
				.getCurrentJbpmContext();
		if (jbpmContext != null){
		 jbpmContext.setActorId(userName);
		 long taskId;
		try {
			taskId = Long.parseLong(taskInstanceId);
		} catch (NumberFormatException e) {
			return "error";
		}
		 TaskInstance taskInstance = jbpmContext.getTaskMgmtSession().loadTaskInstance(taskId);
		 taskInstance.setActorId(userName);
      taskInstanceName = parameters.get("taskInstanceName");
      context.put("taskInstanceName",taskInstanceName);

      OFBizJBPMTaskBean taskBean = new OFBizJBPMTaskBean(id);
      List transitionsList = (ArrayList)taskBean.getAvailableTransitions();
      if(transitionsList!=null&&transitionsList.size()>0)
          context.put("transitionsList",transitionsList);

      OFBizTaskInstance ofbizTaskInstance = new OFBizTaskInstance(request,response);
      String formData =  ofbizTaskInstance.buildDialogDataForm(context);
      taskInstanceFormName = ofbizTaskInstance.getFormName();
      context.put("formData",formData);
   }
context.put("taskInstanceFormName",taskInstanceFormName);
